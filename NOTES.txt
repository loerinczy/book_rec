Recommendation
    How it works
        * take the selected author and book
        * select the users who rated this book
        * take the books that these selected users rated
        * take the books that at least 8 people rated
        * deduplicate the ratings by taking the mean of the duplicates
        * create a user - book matrix with the rating values
        * compute correlation with the selected book and recommend the top k
    Required refactoring
        * on_bad_lines instead of error_bad_lines
        * tab computation erroneous
        * parametrization (remove hardcoded tolkien and lord of the rings)
    Furhter improvements
        * data preprocessing
            * normalization (facilitate matches with typos)
            * remove punctuation
            * remove shady users (a lot of 0 and 10 ratings, giving too little or too many ratings)
            * mix the relevancy of author and book title match
            * use for the above possibly fulltext search
        * error handling (missing author, book, etc..)

Deployment
    * build image out of the application
    * deploy the image in a resilient manner
        * ECS
        * Kubernetes
        * EC2 instances with auto scaling group & load balancer
    * possible deploy the model as a standalone backend
        * on databricks via model serving
        * on databricks via long-running job cluster (compute backend through REST API)



Other difficulties
    * mount-s3 not working without fuse